export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated return type of AddChannelToPlaylist */
export type AddChannelToPlaylistPayload = {
  __typename?: 'AddChannelToPlaylistPayload';
  errors: Array<Scalars['String']>;
  playlist?: Maybe<Playlist>;
};

export type Channel = {
  __typename?: 'Channel';
  id: Scalars['ID'];
  name: Scalars['String'];
  path: Scalars['String'];
  state: ChannelState;
};

/** The connection type for Channel. */
export type ChannelConnection = {
  __typename?: 'ChannelConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ChannelEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Channel>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ChannelEdge = {
  __typename?: 'ChannelEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Channel>;
};

export type ChannelMove = {
  __typename?: 'ChannelMove';
  before: Scalars['Boolean'];
  fromId: Scalars['ID'];
  toId?: Maybe<Scalars['ID']>;
};

export enum ChannelState {
  Online = 'ONLINE',
  Offline = 'OFFLINE',
}

/** Autogenerated return type of CreatePlaylist */
export type CreatePlaylistPayload = {
  __typename?: 'CreatePlaylistPayload';
  errors: Array<Scalars['String']>;
  playlist?: Maybe<Playlist>;
};

/** Autogenerated return type of DeletePlaylist */
export type DeletePlaylistPayload = {
  __typename?: 'DeletePlaylistPayload';
  errors: Array<Scalars['String']>;
};

/** Autogenerated return type of MoveChannelInPlaylist */
export type MoveChannelInPlaylistPayload = {
  __typename?: 'MoveChannelInPlaylistPayload';
  errors: Array<Scalars['String']>;
  playlist?: Maybe<Playlist>;
};

/** Autogenerated return type of MoveChannel */
export type MoveChannelPayload = {
  __typename?: 'MoveChannelPayload';
  errors: Array<Scalars['String']>;
};

/** Autogenerated return type of MovePlaylist */
export type MovePlaylistPayload = {
  __typename?: 'MovePlaylistPayload';
  errors: Array<Scalars['String']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addChannelToPlaylist?: Maybe<AddChannelToPlaylistPayload>;
  createPlaylist?: Maybe<CreatePlaylistPayload>;
  deletePlaylist?: Maybe<DeletePlaylistPayload>;
  moveChannel?: Maybe<MoveChannelPayload>;
  moveChannelInPlaylist?: Maybe<MoveChannelInPlaylistPayload>;
  movePlaylist?: Maybe<MovePlaylistPayload>;
  removeChannelFromPlaylist?: Maybe<RemoveChannelFromPlaylistPayload>;
  updatePlaylist?: Maybe<UpdatePlaylistPayload>;
};

export type MutationAddChannelToPlaylistArgs = {
  channelId: Scalars['ID'];
  playlistId: Scalars['ID'];
};

export type MutationCreatePlaylistArgs = {
  name: Scalars['String'];
};

export type MutationDeletePlaylistArgs = {
  id: Scalars['ID'];
};

export type MutationMoveChannelArgs = {
  fromId: Scalars['ID'];
  toId?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['Boolean']>;
};

export type MutationMoveChannelInPlaylistArgs = {
  playlistId: Scalars['ID'];
  from: Scalars['ID'];
  to: Scalars['ID'];
  before?: Maybe<Scalars['Boolean']>;
};

export type MutationMovePlaylistArgs = {
  fromId: Scalars['ID'];
  toId?: Maybe<Scalars['ID']>;
  before?: Maybe<Scalars['Boolean']>;
};

export type MutationRemoveChannelFromPlaylistArgs = {
  channelId: Scalars['ID'];
  playlistId: Scalars['ID'];
};

export type MutationUpdatePlaylistArgs = {
  id: Scalars['ID'];
  playlist: PlaylistAttributes;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type Playlist = {
  __typename?: 'Playlist';
  channels?: Maybe<ChannelConnection>;
  id: Scalars['ID'];
  name: Scalars['ID'];
};

export type PlaylistChannelsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** Attributes for creating or updating a playlist. */
export type PlaylistAttributes = {
  /** Name of playlist */
  name: Scalars['String'];
};

/** The connection type for Playlist. */
export type PlaylistConnection = {
  __typename?: 'PlaylistConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PlaylistEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Playlist>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PlaylistEdge = {
  __typename?: 'PlaylistEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Playlist>;
};

export type PlaylistMove = {
  __typename?: 'PlaylistMove';
  before: Scalars['Boolean'];
  fromId: Scalars['ID'];
  toId?: Maybe<Scalars['ID']>;
};

export type Query = {
  __typename?: 'Query';
  /** List of available channels */
  channels: ChannelConnection;
  playlist?: Maybe<Playlist>;
  /** List of available playlists */
  playlists?: Maybe<PlaylistConnection>;
  usersOnline?: Maybe<Array<User>>;
};

export type QueryChannelsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type QueryPlaylistArgs = {
  id: Scalars['ID'];
};

export type QueryPlaylistsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** Autogenerated return type of RemoveChannelFromPlaylist */
export type RemoveChannelFromPlaylistPayload = {
  __typename?: 'RemoveChannelFromPlaylistPayload';
  errors: Array<Scalars['String']>;
  playlist?: Maybe<Playlist>;
};

export type Subscription = {
  __typename?: 'Subscription';
  /** A channel was added. */
  channelAdded?: Maybe<Channel>;
  /** A channel was added to a playlist. */
  channelAddedToPlaylist?: Maybe<ChannelMove>;
  /** A channel has changed position. */
  channelMoved?: Maybe<ChannelMove>;
  /** A channel has changed position in a playlist. */
  channelMovedInPlaylist?: Maybe<ChannelMove>;
  /** A channel was removed from a playlist. */
  channelRemovedFromPlaylist?: Maybe<ChannelMove>;
  /** A new playlist has been created. */
  playlistCreated?: Maybe<Playlist>;
  /** A playlist has been deleted. */
  playlistDeleted?: Maybe<Array<Scalars['String']>>;
  /** A playlist has changed position. */
  playlistMoved?: Maybe<PlaylistMove>;
  /** A playlist has been updated. */
  playlistUpdated?: Maybe<Playlist>;
  /** A user went offline. */
  userOffline?: Maybe<User>;
  /** A user appeared online. */
  userOnline?: Maybe<User>;
};

/** Autogenerated return type of UpdatePlaylist */
export type UpdatePlaylistPayload = {
  __typename?: 'UpdatePlaylistPayload';
  errors: Array<Scalars['String']>;
  playlist?: Maybe<Playlist>;
};

export type User = {
  __typename?: 'User';
  name: Scalars['ID'];
};
